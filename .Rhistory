setwd("C:/Users/wyn/Desktop/info201/ch8-lists/exercise-1")
setwd("~/")
data()
data("HairEyeColor ")
data("HairEyeColor")
YY <- data.frame(HairEyeColor)
View(YY)
source('C:/Users/wyn/Desktop/info201/ch8-lists/exercise-1/exercise.R')
View(meals)
View(meals)
View(meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early.meals`
early.meals <- meals[c("breakfast", "lunch")]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
num <- lapply(meals, length)
View(num)
print(num)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
num <- length(meals)
print(num)
AddPizza <- function(list) {
return(paste(list, "pizza"))
}
# Create a vector `bette.meals` that is all your meals, but with pizza!
bette.meals <- AddPizza(meals)
print(bette.meals)
AddPizza <- function(list) {
return(lappy(list, paste, "pizza"))
}
# Create a vector `bette.meals` that is all your meals, but with pizza!
bette.meals <- AddPizza(meals)
print(bette.meals)
AddPizza <- function(list) {
return(lapply(list, paste, "pizza"))
}
# Create a vector `bette.meals` that is all your meals, but with pizza!
bette.meals <- AddPizza(meals)
print(bette.meals)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
num <- lapply(meals, length)
print(num)
# Hint: use the `lapply()` function to apply the `length()` function to each item
num <- lapply(meals, length)
print(num)
# Write a function `AddPizza` that adds pizza to a given `meal` vector
AddPizza <- function(list) {
list <- c(list, "pizzA")
}
# Create a vector `bette.meals` that is all your meals, but with pizza!
bette.meals <- AddPizza(meals)
print(bette.meals)
print(num)
# Write a function `AddPizza` that adds pizza to a given `meal` vector
AddPizza <- function(list) {
list <- c(list, "pizzA")
}
# Create a vector `bette.meals` that is all your meals, but with pizza!
bette.meals <- lapply(meals, AddPizza)
print(bette.meals)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
num <- lapply(meals, length)
print(num)
# Write a function `AddPizza` that adds pizza to a given `meal` vector
AddPizza <- function(list) {
list <- paste(list, "pizzA")
}
# Create a vector `bette.meals` that is all your meals, but with pizza!
bette.meals <- lapply(meals, AddPizza)
print(bette.meals)
lapply(meals, length)
print(num)
# Write a function `AddPizza` that adds pizza to a given `meal` vector
AddPizza <- function(list) {
list <- c(list, "pizzA")
}
# Create a vector `bette.meals` that is all your meals, but with pizza!
bette.meals <- lapply(meals, AddPizza)
print(bette.meals)
# Create a *list* of 10 random numbers. Use the `runif` function to make a vector
# of random numbers, then use `as.list()` to convert that to a list
n <- as.list(runif(10))
View(n)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest .1 (one decimal place)
n <- lapply(n, round, 1)
View(n)
View(n)
print(n)
# Create a variable 'sentence' that has contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- tolower("Make the sentence lowercase; you can use a function to help")
# Use the `strsplit()` function to split the sentence into vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
letter <- strsplit(sentence, "")
View(letter)
# Extract the vector of letters from the resulting list
letter[[1]]
typeof(letter)
letter[1]
typeof(letter)
letter[[1]]
typeof(letter[[1]])
# Use the `unique()` function to get a vector of unique letters
unique(letter)
sentence <- tolower("Make the sentence lowercase; you can use a function to help")
# Use the `strsplit()` function to split the sentence into vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
list <- strsplit(sentence, "")
# Extract the vector of letters from the resulting list
letter <- list[[1]]
typeof(letter)
print(l.uniq)
# Extract the vector of letters from the resulting list
letter <- list[[1]]
# Use the `unique()` function to get a vector of unique letters
l.uniq <- unique(letter)
print(l.uniq)
typeof(letter)
# Define a function `CountOccurances` that takes in two parameters: a letter and
# a vector of letters. The function should return how many times that letter
# occurs in the provided vector
# Hint: use a filter operation!
CountOccurances <- function(l, ls) {
return(ls[lapply(ls, count(l))])
}
# Call your `CountOccurances()` function to see how many times the letter 'e' is
# in your sentence.
CountOccurances("e", letter)
CountOccurances <- function(l, ls) {
return(ls[lapply(ls, countn(l))])
}
# Call your `CountOccurances()` function to see how many times the letter 'e' is
# in your sentence.
CountOccurances("e", letter)
# Define a function `CountOccurances` that takes in two parameters: a letter and
# a vector of letters. The function should return how many times that letter
# occurs in the provided vector
# Hint: use a filter operation!
CountOccurances <- function(l, ls) {
return(ls[lapply(ls, ncount(l))])
}
# Call your `CountOccurances()` function to see how many times the letter 'e' is
# in your sentence.
CountOccurances("e", letter)
# Hint: use a filter operation!
CountOccurances <- function(l, ls) {
return(length(ls[ls == l]))
}
# Call your `CountOccurances()` function to see how many times the letter 'e' is
# in your sentence.
CountOccurances("e", letter)
# in your sentence.
CountOccurances("e", letter)
# Use `sapply()` to apply your `CountOccurances()` function to each unique letter
# in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
frequencies <- as.list(sapply(ltrs.unique, CountOccurances, ltrs))
# Print the resulting list of frequencies
print(frequencies)
# Use `sapply()` to apply your `CountOccurances()` function to each unique letter
# in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
frequencies <- as.list(sapply(l.unique, CountOccurances, letter))
# Use `sapply()` to apply your `CountOccurances()` function to each unique letter
# in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
frequencies <- as.list(sapply(l.uniq, CountOccurances, letter))
# Print the resulting list of frequencies
print(frequencies)
#################
#### PART 1 #####
#################
#1
names <- c("Adele Miller", "Anirudh Subramanyam", "Zhanna Voloshina", "Tejveer Rai", "Bao Dinh", "Iris Sun")
math.grades <- 90:95
spanish.grades <- 60:55
tas <- data.frame(names, math.grades, spanish.grades)
View(tas)
#5
text <- "The TA data frame has"
?paste
# Start with a character vector of shirt sizes
shirt.sizes <- c('small', 'medium', 'small', 'large', 'medium', 'large')
# Convert to a vector of factor data
shirt.sizes.factor <- as.factor(shirt.sizes)
# View the factor and its levels
print(shirt.sizes.factor)
# The length of the factor is still the length of the vector, not the number of levels
length(shirt.sizes.factor)  # 6
source('~/.active-rstudio-document')
# Start with a character vector of shirt sizes
shirt.sizes <- c('small', 'medium', 'small', 'large', 'medium', 'large')
# Convert to a vector of factor data
shirt.sizes.factor <- as.factor(shirt.sizes)
print(shirt.sizes.factor)
length(shirt.sizes.factor)  # 6
# Create a factor of numbers (factors need not be strings)
num.factors <- as.factor(c(10,10,20,20,30,30,40,40))
# Print the factor to see its levels
print(num.factors)
# Multiply the numbers by 2
num.factors * 2  # Error: * not meaningful
# returns vector of NA instead
# Changing entry to a level is fine
num.factors[1] <- 40
# Change entry to a value that ISN'T a level fails
num.factors[1] <- 50  # Error: invalid factor level
# num.factors[1] is now NA
shirt.size <- c('small', 'medium', 'small', 'large', 'medium', 'large')
cost <- c(15.5, 17, 17, 14, 12, 23)
# Data frame of inventory (with factors)
shirts.factor <- data.frame(shirt.size, cost)
# Produce a list of data frames, one for each factor level
# first argument is the data frame to split, second is the factor to split by
shirt.size.frames <- split(shirts.factor, shirts.factor$shirt.size)
View(shirts.factor)
View(shirt.size.frames)
tapply(shirts$cost, shirts$shirt.size, mean)
shirts <- data.frame(shirt.size, cost, stringsAsFactors=FALSE)
tapply(shirts$cost, shirts$shirt.size, mean)
?grepl
install.packages("httr")
install.packages("httr")
library("httr")
# GET request for iSchool home page
GET("https://ischool.uw.edu/")
# GET request to search google
query.params <- list(q = "informatics")
GET("https://www.google.com/search", query = query.params)
# GET request for GitHhub repos
base.uri <- "https://api.github.com"
resource <- paste0("/users/","info201a-w18","/repos")
GET(paste0(base.uri, resource))
install.packages("httr")  # once per machine
library("httr")
library("httr")
response <- GET("https://api.github.com/search/repositories?q=d3&sort=forks")
query.params <- list(q = "d3", sort = "forks")
View(query.params)
View(query.params)
print(query.params)
response <- GET("https://api.github.com", query = query.params)
print(response)
body <- content(response, "text")
print(body)
# same as above, with explicit scales
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class)) +
scale_x_continuous() +
scale_y_continuous() +
scale_colour_discrete()
# You will also want to load `dplyr`
install.packages("ggplot2")  # once per machine
library("ggplot2")
library("dplyr")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class)) +
scale_x_continuous() +
scale_y_continuous() +
scale_colour_discrete()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class)) +
scale_colour_discrete()
# same as above, with explicit scales
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class)) +
scale_x_continuous() +
scale_y_continuous() +
scale_colour_discrete()
# same as above, with explicit scales
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class)) +
scale_x_continuous() +
scale_colour_discrete()
install.packages("shiny")  # once per machine
library("shiny")
# The ui is the result of calling the `fluidPage()` layout function
my.ui <- fluidPage(
# A widget: a text input box (save input in the `username` key)
textInput('username', label="What is your name?"),
# An output element: a text output (for the `message` key)
textOutput('message')
)
# The ui is the result of calling the `fluidPage()` layout function
my.ui <- fluidPage(
# A widget: a text input box (save input in the `username` key)
textInput('username', label="What is your name?"),
# An output element: a text output (for the `message` key)
textOutput('message')
)
View(response)
View(shirt.size.frames)
View(query.params)
View(my.ui)
library("shiny")
# The ui is the result of calling the `fluidPage()` layout function
my.ui <- fluidPage(
# A widget: a text input box (save input in the `username` key)
textInput('username', label="What is your name?"),
# An output element: a text output (for the `message` key)
textOutput('message')
)
View(my.ui)
# In ui.R file
my.ui <- fluidPage(
# define widgets
)
shinyUI(my.ui)
# In ui.R file
my.ui <- fluidPage(
# define widgets
)
shinyUI(my.ui)
library("shiny")
# In server.R file
my.server <- function(input, output) {
# define output reactive expressions
}
shinyServer(my.server)
runApp('C:/Users/wyn/Desktop/info201/a7-data-app-yining323')
runApp('C:/Users/wyn/Desktop/info201/a7-data-app-yining323')
runApp('C:/Users/wyn/Desktop/info201/a7-data-app-yining323')
runApp('C:/Users/wyn/Desktop/info201/a7-data-app-yining323')
runApp('C:/Users/wyn/Desktop/info201/a7-data-app-yining323')
runApp('C:/Users/wyn/Desktop/info201/a7-data-app-yining323')
runApp('C:/Users/wyn/Desktop/info201/a7-data-app-yining323')
runApp('C:/Users/wyn/Desktop/info201/a7-data-app-yining323')
runApp('C:/Users/wyn/Desktop/info201/a7-data-app-yining323')
setwd("C:/Users/wyn/Desktop/info201/AD_4-2017-Seattle-911-Data")
setwd("C:/Users/wyn/Desktop/info201/AD_4-2017-Seattle-911-Data")
shiny::runApp()
